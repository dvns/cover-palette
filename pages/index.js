import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/client';
import TracksList from '../components/TracksList';
import { StyledWrapper } from '../styles/WrapperStyles';
import { ToastContainer, Zoom } from 'react-toastify';
import { getAccessToken, getSeveralTracks } from '../lib/spotify';
import TrackItem from '../components/TrackItem';
import StyledTracksList from '../styles/TracksListStyles';

export default function Home({ tracks }) {
  const [session, loading] = useSession();
  console.log('# Session: ', session);

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {!session && (
          <section>
            <h1>COVER PALETTES</h1>
            <p>Colors inspired by what you're listening to!</p>
            <StyledWrapper>
              <StyledTracksList>
                {tracks?.map((track) => (
                  <TrackItem key={track.id} track={track} />
                ))}
              </StyledTracksList>
            </StyledWrapper>
            Not signed in <br />
            <button onClick={() => signIn('spotify')}>Sign in</button>
          </section>
        )}

        <StyledWrapper>
          {session && (
            <>
              Signed in as {session.user?.name} <br />
              <button onClick={() => signOut('spotify')}>Sign out</button>
              <TracksList />
            </>
          )}
        </StyledWrapper>
        <ToastContainer
          position="top-center"
          autoClose={2000}
          hideProgressBar
          newestOnTop
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable={false}
          pauseOnHover
          transition={Zoom}
        />
      </main>
    </div>
  );
}

export async function getStaticProps() {
  const accessToken = await getAccessToken();
  const ids = [
    '0v9Wz8o0BT8DU38R4ddjeH', // chance
    '41zXlQxzTi6cGAjpOXyLYH', // billie
    '3rfw4ft9rlXbbQzqRJIaYV', // gallant
    '3hNywmR93yvj68y2zl8mRt', // busty
  ];
  const items = await getSeveralTracks(
    accessToken.access_token,
    ids.toString()
  );

  return {
    props: {
      tracks: items.tracks,
    },
  };
}
